'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var MUIButton = _interopDefault(require('@material-ui/core/Button'));
var IconButton = _interopDefault(require('@material-ui/core/IconButton'));
var jsvalidator = _interopDefault(require('jsvalidator'));
var styled = _interopDefault(require('styled-components'));
var Popover = _interopDefault(require('@material-ui/core/Popover'));
var MUIMenu = _interopDefault(require('@material-ui/core/Menu'));
var MenuItem = _interopDefault(require('@material-ui/core/MenuItem'));
var MUICheckbox = _interopDefault(require('@material-ui/core/Checkbox'));
var List = _interopDefault(require('@material-ui/core/List'));
var ListItem = _interopDefault(require('@material-ui/core/ListItem'));
var ListItemIcon = _interopDefault(require('@material-ui/core/ListItemIcon'));
var lodash = require('lodash');
var ArrowDownwardIcon = _interopDefault(require('@material-ui/icons/ArrowDownward'));
var ArrowUpwardIcon = _interopDefault(require('@material-ui/icons/ArrowUpward'));
var SettingsIcon = _interopDefault(require('@material-ui/icons/Settings'));
var MUIDrawer = _interopDefault(require('@material-ui/core/Drawer'));
var CloseIcon = _interopDefault(require('@material-ui/icons/Close'));
var MoreHorizIcon = _interopDefault(require('@material-ui/icons/MoreHoriz'));
var ExpandMoreIcon = _interopDefault(require('@material-ui/icons/ExpandMore'));
var ViewQuiltIcon = _interopDefault(require('@material-ui/icons/ViewQuilt'));
var CreateIcon = _interopDefault(require('@material-ui/icons/Create'));
var TextField = _interopDefault(require('@material-ui/core/TextField'));
var FormGroup = _interopDefault(require('@material-ui/core/FormGroup'));
var FormControl = _interopDefault(require('@material-ui/core/FormControl'));
var FormControlLabel = _interopDefault(require('@material-ui/core/FormControlLabel'));
var Switch = _interopDefault(require('@material-ui/core/Switch'));
var FormatListBulletedIcon = _interopDefault(require('@material-ui/icons/FormatListBulleted'));
var GridOnIcon = _interopDefault(require('@material-ui/icons/GridOn'));
var ChevronRightIcon = _interopDefault(require('@material-ui/icons/ChevronRight'));
var ChevronLeftIcon = _interopDefault(require('@material-ui/icons/ChevronLeft'));
var Chip = _interopDefault(require('@material-ui/core/Chip'));
var InputBase = _interopDefault(require('@material-ui/core/InputBase'));
var SearchIcon = _interopDefault(require('@material-ui/icons/Search'));
var HelpIcon = _interopDefault(require('@material-ui/icons/Help'));
var CircularProgress = _interopDefault(require('@material-ui/core/CircularProgress'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var theme = {
  h1: "\n\t\tfont-size: 20px;\n\t\tfont-weight: 500;\n\t",
  h2: "\n\t\tfont-size: 14px;\n\t\tfont-weight: normal;\n\t",
  colors: {
    blue: "#0070f2",
    blueHover: "#0b50f1",
    lightGray: "#757575",
    darkGray: "#081324",
    red: "#b10000",
    gray100: "rgba(250, 250, 250, 1)",
    gray200: "rgba(240, 242, 245, 1)",
    gray300: "rgba(215, 216, 220, 1)",
    gray400: "rgba(157, 159, 167, 1)",
    gray500: "rgba(132, 135, 145, 1)",
    gray600: "rgba(107, 111, 124, 1)",
    gray700: "rgba(59, 66, 78, 1)",
    gray800: "rgba(10, 19, 35, 1)"
  },
  borders: {
    lightGray: "1px solid rgba(0, 0, 0, .05)",
    gray: "1px solid rgba(0, 0, 0, .15)"
  },
  fontFamily: "-apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Ubuntu, Arial, sans-serif",
  animations: {
    backgroundMs: "250ms"
  }
};

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n\t\t& svg {\n\t\t\tcolor: ", ";\n\t\t}\n\t"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n\t\t& svg {\n\t\t\tcolor: ", ";\n\t\t}\n\t"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: inline-flex;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n\t& > .icon {\n\t\tmargin-right: 10px;\n\t}\n\n\t& > .label {\n\t\tfont-family: ", ";\n\t}\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var StyledMenuItem = styled(MenuItem)(_templateObject(), theme.fontFamily);
var StyledIcon = styled.div(_templateObject2());
var iconTypes = {
  blue: styled(StyledIcon)(_templateObject3(), theme.colors.blue),
  red: styled(StyledIcon)(_templateObject4(), theme.colors.red)
};

function Menu(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "items",
      type: "array",
      schema: {
        type: "object",
        schema: [{
          name: "label",
          type: "string"
        }, {
          name: "color",
          type: "string",
          "enum": ["blue", "red", "black", "gray"]
        }, {
          name: "mIcon",
          type: "object"
        }, {
          name: "disabled",
          type: "boolean"
        }, {
          name: "onClick",
          type: "function"
        }],
        allowExtraKeys: false
      }
    }, {
      name: "anchorEl",
      type: "object"
    }, {
      name: "open",
      type: "boolean",
      required: true
    }, {
      name: "onClose",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });
  var menuItems = props.items.map(function (item, i) {
    var Icon = item.mIcon;

    var onClick = function onClick() {
      item.onClick();
      props.onClose();
    };

    var MyIcon = item.color !== undefined ? iconTypes[item.color] : StyledIcon;
    return React__default.createElement(StyledMenuItem, {
      key: i,
      onClick: onClick,
      disabled: item.disabled
    }, item.mIcon && React__default.createElement(MyIcon, {
      className: "icon"
    }, React__default.createElement(Icon, null)), React__default.createElement("span", {
      className: "label"
    }, item.label));
  });
  return React__default.createElement(MUIMenu, {
    anchorEl: props.anchorEl,
    open: props.open,
    onClose: props.onClose
  }, menuItems);
}

function _templateObject18() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject18 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: black;\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: ", "\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: black;\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: #ddd;\n\t\t\tcolor: black;\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: #ccc;\n\t\t}\n\t"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: ", ";\n\t\t\tcolor: white;\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: #900f0f;\n\t\t}\n\t"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: ", "13;\n\t\t\tcolor: ", ";\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: ", "26;\n\t\t}\n\t"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tbackground: ", ";\n\t\t\tcolor: white;\n\t\t}\n\t\t& > button:hover {\n\t\t\tbackground: ", ";\n\t\t}\n\t"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tborder-color: #ddd;\n\t\t\tcolor: black;\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground-color: ", "23;\n\t\t}\n\t"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tborder-color: #ddd;\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground: ", "23;\n\t\t}\n\t"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$1() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tborder-color: ", ";\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground: ", "23;\n\t\t}\n\t"]);

  _templateObject4$1 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  var data = _taggedTemplateLiteral(["\n\t\t& > button {\n\t\t\tborder-color: ", ";\n\t\t\tcolor: ", ";\n\t\t}\n\t\t\n\t\t& > button:hover {\n\t\t\tbackground: ", "23;\n\t\t}\n\t"]);

  _templateObject3$1 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tpadding: 10px;\n"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["\n\t& > button {\n\t\tfont-family: ", ";\n\t\ttext-transform: none;\n\t\tfont-size: 14px;\n\t}\n\t\n\t&.normalButton > button {\n\t\tbox-shadow: none;\n\t}\n\t\n\t&.normalButton > button .icon {\n\t\tfont-size: 20px;\n\t}\n\t\n\t&.normalButton > button .icon_left {\n\t\tmargin-right: 4px;\n\t}\n\t\n\t&.normalButton > button .icon_right {\n\t\tmargin-left: 4px;\n\t}\n\t\n\t&.iconButton > button {\n\t\tpadding: 8px;\n\t\tfont-size: 15px;\n\t}\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var ButtonWrapper = styled.span(_templateObject$1(), theme.fontFamily);
var PopoverWrapper = styled.div(_templateObject2$1(), theme.fontFamily);
var types = {
  blue_outlined: styled(ButtonWrapper)(_templateObject3$1(), theme.colors.blue, theme.colors.blue, theme.colors.blue),
  red_outlined: styled(ButtonWrapper)(_templateObject4$1(), theme.colors.red, theme.colors.red, theme.colors.red),
  gray_outlined: styled(ButtonWrapper)(_templateObject5(), theme.colors.lightGray, theme.colors.lightGray),
  black_outlined: styled(ButtonWrapper)(_templateObject6(), theme.colors.lightGray),
  blue_contained: styled(ButtonWrapper)(_templateObject7(), theme.colors.blue, theme.colors.blueHover),
  lightBlue_contained: styled(ButtonWrapper)(_templateObject8(), theme.colors.blue, theme.colors.blue, theme.colors.blue),
  red_contained: styled(ButtonWrapper)(_templateObject9(), theme.colors.red),
  gray_contained: styled(ButtonWrapper)(_templateObject10()),
  blue_text: styled(ButtonWrapper)(_templateObject11(), theme.colors.blue, theme.colors.blue),
  red_text: styled(ButtonWrapper)(_templateObject12(), theme.colors.red, theme.colors.red),
  gray_text: styled(ButtonWrapper)(_templateObject13(), theme.colors.lightGray, theme.colors.lightGray),
  black_text: styled(ButtonWrapper)(_templateObject14(), theme.colors.lightGray),
  blue_icon: styled(ButtonWrapper)(_templateObject15(), theme.colors.blue, theme.colors.blue),
  black_icon: styled(ButtonWrapper)(_templateObject16(), theme.colors.lightGray),
  red_icon: styled(ButtonWrapper)(_templateObject17(), theme.colors.red, theme.colors.red),
  gray_icon: styled(ButtonWrapper)(_templateObject18(), theme.colors.lightGray, theme.colors.lightGray)
};

function Button(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "label",
      type: "any"
    }, {
      name: "className",
      type: "string"
    }, {
      name: "color",
      type: "string",
      "enum": ["black", "blue", "lightBlue", "red", "gray"],
      required: true
    }, {
      name: "variant",
      type: "string",
      "enum": ["icon", "outlined", "contained", "text"],
      required: true
    }, {
      name: "iconPosition",
      type: "string",
      "enum": ["left", "right"]
    }, {
      name: "mIcon",
      type: "object"
    }, {
      name: "onClick",
      type: "function"
    }, {
      name: "fullWidth",
      type: "boolean"
    }, {
      name: "disabled",
      type: "boolean"
    }, {
      name: "popover",
      type: "object"
    }, {
      name: "menuItems",
      type: "array"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      anchorEl = _useState2[0],
      setAnchorEl = _useState2[1];

  var _useState3 = React.useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      popoverAnchorEl = _useState4[0],
      setPopoverAnchorEl = _useState4[1];

  var MyButton = types["".concat(props.color, "_").concat(props.variant)];

  if (MyButton === undefined) {
    throw new Error("Color '".concat(props.color, "' and variant '").concat(props.variant, "' combination is not valid"));
  }

  var MaterialIcon = props.mIcon;
  var iconPosition = props.iconPosition || "left";

  function openMenu(event) {
    setAnchorEl(event.currentTarget);
  }

  function closeMenu() {
    setAnchorEl(null);
  }

  function openPopover(event) {
    setPopoverAnchorEl(event.currentTarget);
  }

  function closePopover(event) {
    setPopoverAnchorEl(null);
  }

  var onClick = props.popover ? openPopover : props.menuItems ? openMenu : props.onClick;
  return React__default.createElement(MyButton, {
    className: "\n\t\t\t".concat(props.className ? props.className : "", "\n\t\t\tbutton\n\t\t\t").concat(props.variant === "icon" ? "iconButton" : "normalButton", "\n\t\t")
  }, props.variant !== "icon" && React__default.createElement(MUIButton, {
    variant: props.variant,
    onClick: onClick,
    fullWidth: props.fullWidth,
    disabled: props.disabled
  }, props.mIcon && iconPosition === "left" && React__default.createElement(MaterialIcon, {
    className: "icon icon_left"
  }), props.label, props.mIcon && iconPosition === "right" && React__default.createElement(MaterialIcon, {
    className: "icon icon_right"
  })), props.variant === "icon" && React__default.createElement(IconButton, {
    onClick: onClick,
    disabled: props.disabled
  }, props.mIcon && React__default.createElement(MaterialIcon, {
    className: "icon"
  })), props.menuItems && React__default.createElement(Menu, {
    items: props.menuItems,
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: closeMenu
  }), props.popover && React__default.createElement(Popover, {
    open: Boolean(popoverAnchorEl),
    anchorEl: popoverAnchorEl,
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'left'
    },
    transformOrigin: {
      vertical: 'top',
      horizontal: 'left'
    },
    onClose: closePopover,
    disableRestoreFocus: true
  }, React__default.createElement(PopoverWrapper, null, props.popover)));
}

var Button$1 = React.memo(Button);

function _templateObject$2() {
  var data = _taggedTemplateLiteral(["\n\t", "\n\t& > .button + .normalButton {\n\t\tmargin-left: 5px;\n\t}\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper = styled.span(_templateObject$2(),
/* ensures that the NEXT button spaces itself, if it isn't an icon button */
"");

function ButtonRow(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "buttons",
      type: "array"
    }, {
      name: "children",
      type: "object"
    }, {
      name: "className",
      type: "string"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  if (props.children && props.buttons) {
    throw new Error("ButtonRow cannot receive both children and a buttons prop");
  }

  var buttons = React.useMemo(function () {
    if (props.buttons === undefined) {
      return null;
    }

    return props.buttons.map(function (button, i) {
      return React__default.createElement(Button$1, _extends({
        key: i
      }, button));
    });
  }, [props.buttons]);
  return React__default.createElement(StyledWrapper, {
    className: props.className
  }, props.children || buttons);
}

var ButtonRow$1 = React.memo(ButtonRow);

function _templateObject$3() {
  var data = _taggedTemplateLiteral(["\n\t&.checked {\n\t\tcolor: ", ";\n\t}\n"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledCheckbox = styled(MUICheckbox)(_templateObject$3(), theme.colors.blue);

function Checkbox(props) {
  return React__default.createElement(StyledCheckbox, {
    className: "\n\t\t\t\t".concat(props.checked ? "checked" : "", "\n\t\t\t\t").concat(props.className, "\n\t\t\t"),
    color: "default",
    edge: props.edge,
    checked: props.checked,
    onClick: props.onClick,
    disableRipple: true
  });
}

var Checkbox$1 = React.memo(Checkbox);

function _templateObject$4() {
  var data = _taggedTemplateLiteral(["\n\t& > ul {\n\t\tpadding: 0;\n\t}\n\t\n\t& > ul > .listItem {\n\t\tpadding-top: 0px;\n\t\tpadding-bottom: 0px;\n\t}\n\t\n\t& > ul > .listItem > .listItemIcon {\n\t\tmin-width: auto;\n\t}\n"]);

  _templateObject$4 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv = styled.div(_templateObject$4());

function CheckboxList(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "checked",
      type: "array",
      schema: {
        type: "string"
      }
    }, {
      name: "options",
      type: "array",
      schema: {
        type: "object",
        schema: [{
          name: "value",
          type: "string"
        }, {
          name: "label",
          type: "string"
        }],
        allowExtraKeys: false
      }
    }, {
      name: "onChange",
      type: "function"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var handleToggle = function handleToggle(value) {
    return function () {
      // toggle the item in the array
      var newChecked = lodash.xor(props.checked, [value]);
      props.onChange(newChecked);
    };
  };

  return React__default.createElement(StyledDiv, null, React__default.createElement(List, {
    dense: true
  }, props.options.map(function (option) {
    var checked = props.checked.indexOf(option.value) !== -1;
    return React__default.createElement(ListItem, {
      className: "listItem",
      key: option.value,
      dense: true,
      button: true,
      onClick: handleToggle(option.value)
    }, React__default.createElement(ListItemIcon, {
      className: "listItemIcon"
    }, React__default.createElement(Checkbox$1, {
      className: checked ? "checked" : "",
      color: "default",
      edge: "start",
      checked: checked,
      disableRipple: true
    })), React__default.createElement("span", null, option.label));
  })));
}

function _templateObject$5() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tfont-size: 14px;\n"]);

  _templateObject$5 = function _templateObject() {
    return data;
  };

  return data;
}
var DrawerContent = styled.div(_templateObject$5(), theme.fontFamily);

function Drawer(props) {
  var _useState = React.useState({
    open: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  React.useEffect(function () {
    if (props.open === true) {
      setState(_objectSpread2({}, state, {
        open: true
      }));
    }
  }, [props.open]);

  var onExited = function onExited() {
    setState(_objectSpread2({}, state, {
      open: false
    }));
  };

  return React__default.createElement(MUIDrawer, {
    anchor: "right",
    open: props.open,
    onClose: props.onClose,
    SlideProps: {
      onExited: onExited
    }
  }, state.open && React__default.createElement(DrawerContent, null, props.children));
}

function _templateObject$6() {
  var data = _taggedTemplateLiteral(["\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tpadding: 12px;\n\t}\n\t\n\t& > .left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t& > .left > h1 {\n\t\t", "\n\t\t\n\t\tdisplay: inline;\n\t\tpadding: 0px 50px 0px 20px;\n\t\tmargin: 0;\n\t\tposition: relative;\n\t\ttop: -2px;\n\t}\n"]);

  _templateObject$6 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$1 = styled.div(_templateObject$6(), theme.h1);

function DrawerTopBar(props) {
  return React__default.createElement(StyledWrapper$1, null, React__default.createElement("div", {
    className: "left"
  }, React__default.createElement(Button$1, {
    mIcon: CloseIcon,
    variant: "icon",
    color: "black",
    onClick: props.onClose
  }), React__default.createElement("h1", null, props.title)), React__default.createElement("div", {
    className: "right"
  }, React__default.createElement(ButtonRow$1, null, props.onCancel && React__default.createElement(Button$1, {
    label: "Cancel",
    color: "black",
    variant: "text",
    onClick: props.onCancel
  }), props.onSave && React__default.createElement(Button$1, {
    label: "Save",
    color: "blue",
    variant: "contained",
    onClick: props.onSave
  }), props.onApply && React__default.createElement(Button$1, {
    label: "Apply",
    color: "blue",
    variant: "contained",
    onClick: props.onApply
  }))));
}

function _templateObject$7() {
  var data = _taggedTemplateLiteral(["\n\t& {\n\t\tflex: 1;\n\t\tpadding: 12px;\n\t}\n\t\n\t&.background-gray {\n\t\tbackground: #FAFBFC;\n\t}\n"]);

  _templateObject$7 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$1 = styled.div(_templateObject$7());

function DrawerBottom(props) {
  return React__default.createElement(StyledDiv$1, {
    className: "\n\t\t\t".concat(props.background ? "background-".concat(props.background) : "", "\n\t\t")
  }, props.children);
}

function _templateObject$8() {
  var data = _taggedTemplateLiteral(["\n\twidth: 600px;\n"]);

  _templateObject$8 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$2 = styled.div(_templateObject$8());

function DrawerContent$1(props) {
  return React__default.createElement(StyledDiv$2, null, React__default.createElement(DrawerTopBar, {
    title: props.title,
    onSave: props.onSave,
    onApply: props.onApply,
    onClose: props.onClose,
    onCancel: props.onCancel
  }), React__default.createElement(DrawerBottom, {
    background: props.background
  }, props.children));
}

function _templateObject$9() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: flex;\n\t\n\t& > div > h2 {\n\t\t", "\n\t\tpadding-left: 15px;\n\t\tmargin: 0 0 1rem 0;\n\t}\n\t\n\t& > .left {\n\t\tflex: 1;\n\t\tpadding-right: 20px;\n\t\twidth: 200px;\n\t}\n\t\n\t& > .left .listItem {\n\t\tmargin: 3px 0px;\n\t\tbackground: white;\n\t}\n\t\n\t& > .right {\n\t\tflex: 1;\n\t\twidth: 200px;\n\t}\n\t\n\t& > .right > .item {\n\t\tbackground: white;\n\t\tline-height: 42px;\n\t\tmargin: 3px 0px;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tpadding-left: 15px;\n\t}\n\t\n\t& > .right > .item > .buttons {\n\t\ttext-align: right;\n\t}\n"]);

  _templateObject$9 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$2 = styled.div(_templateObject$9(), theme.h2);

function GridColumnDrawerContent(props) {
  var _useState = React.useState({
    activeColumns: props.columns.map(function (val) {
      return val.name;
    })
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var saveColumns = function saveColumns() {
    props.onClose();
    props.onChange(state.activeColumns);
  };

  var onColumnsChange = function onColumnsChange(data) {
    setState(_objectSpread2({}, state, {
      activeColumns: data
    }));
  };

  var orderClick = function orderClick(name, num) {
    return function () {
      // changing the order is actually just swapping one element for another
      // so we find the elements current position and it's new position and swap the two names
      var index = state.activeColumns.indexOf(name);
      var newIndex = index + num;
      var swapValue = state.activeColumns[newIndex];
      state.activeColumns[index] = swapValue;
      state.activeColumns[newIndex] = name;
      setState(_objectSpread2({}, state, {
        activeColumns: _toConsumableArray(state.activeColumns)
      }));
    };
  };

  var columnOptions = props.allColumns.map(function (column) {
    return {
      label: column.label,
      value: column.name
    };
  }).sort(function (a, b) {
    return a.label.localeCompare(b.label);
  });
  return React__default.createElement(DrawerContent$1, {
    title: "Table Settings",
    background: "gray",
    onApply: saveColumns,
    onClose: props.onClose,
    onCancel: props.onClose
  }, React__default.createElement(StyledWrapper$2, null, React__default.createElement("div", {
    className: "left"
  }, React__default.createElement("h2", null, "Columns"), React__default.createElement(CheckboxList, {
    options: columnOptions,
    checked: state.activeColumns,
    onChange: onColumnsChange
  })), React__default.createElement("div", {
    className: "right"
  }, React__default.createElement("h2", null, "Column Order"), state.activeColumns.map(function (name, i) {
    var column = props.allColumns.find(function (val) {
      return val.name === name;
    });
    return React__default.createElement("div", {
      className: "item",
      key: column.name
    }, React__default.createElement("span", null, column.label), React__default.createElement("span", {
      className: "buttons"
    }, React__default.createElement(Button$1, {
      mIcon: ArrowDownwardIcon,
      variant: "icon",
      color: "black",
      disabled: i === state.activeColumns.length - 1,
      onClick: orderClick(column.name, 1)
    }), React__default.createElement(Button$1, {
      mIcon: ArrowUpwardIcon,
      variant: "icon",
      color: "black",
      disabled: i === 0,
      onClick: orderClick(column.name, -1)
    })));
  }))));
}

function GridColumnDrawer(props) {
  return React__default.createElement(Drawer, {
    open: props.open,
    onClose: props.onClose
  }, React__default.createElement(GridColumnDrawerContent, {
    columns: props.columns,
    allColumns: props.allColumns,
    onChange: props.onChange,
    onClose: props.onClose
  }));
}

function DataViewColumnControl(props) {
  var _useState = React.useState({
    open: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var gearClick = function gearClick() {
    setState(_objectSpread2({}, state, {
      open: !state.open
    }));
  };

  return React.createElement(React.Fragment, null, React.createElement(Button$1, {
    color: "black",
    label: "Columns",
    variant: "outlined",
    mIcon: SettingsIcon,
    onClick: gearClick,
    iconPosition: "left"
  }), props.onChange !== undefined && React.createElement(GridColumnDrawer, {
    open: state.open,
    columns: props.columns,
    allColumns: props.allColumns,
    onChange: props.onChange,
    onClose: gearClick
  }));
}

function _templateObject2$2() {
  var data = _taggedTemplateLiteral(["\n\tfont-size: 14px;\n\ttext-align: left;\n\tfont-weight: 400;\n\tpadding: 5px 0px;\n\theight: 40px;\n\tcolor: ", ";\n\tposition: sticky;\n\ttop: 0;\n\tz-index: 1;\n\tbackground-color: ", ";\n\twhite-space: nowrap;\n\n\t", "\n\t&:after {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tborder-bottom: ", ";\n\t\tpointer-events: none;\n\t}\n\t\n\t& > .columnHeader {\n\t\tdisplay: inline-flex;\n\t\talign-items: center;\n\t}\n\n\t&.paddingRight:not(:last-child) {\n\t\tpadding-right: 15px;\n\t}\n\n\t&.sortable > .columnHeader {\n\t\tcursor: pointer;\n\t}\n\t\n\t& > .columnHeader > .icon {\n\t\tvisibility: hidden;\n\t\tfont-size: 18px;\n\t\tmargin-left: 0.25rem;\n\t\tmargin-top: 1px;\n\t}\n\t\n\t&.active {\n\t\tcolor: ", ";\n\t\tfont-weight: 700;\n\t}\n\n\t&.active:after {\n\t\tborder-bottom: 1px solid ", ";\n\t}\n\t\n\t&.active > .columnHeader > .icon {\n\t\tvisibility: visible;\n\t}\n\t\n\t&.active > .columnHeader:hover > .icon {\n\t\tcolor: black;\n\t}\n\t\n\t& > .columnHeader:hover > .icon {\n\t\tvisibility: visible;\n\t\tcolor: ", ";\n\t}\n\t\n\t&.bulk {\n\t\twidth: 52px;\n\t}\n"]);

  _templateObject2$2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$a() {
  var data = _taggedTemplateLiteral(["\n\ttext-align: left;\n"]);

  _templateObject$a = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$3 = styled.thead(_templateObject$a());
var StyledTh = styled.th(_templateObject2$2(), theme.colors.gray700, theme.colors.gray200,
/* Borders on sticky elements don't carry through, so we put them on the :after element */
"", theme.borders.gray200, theme.colors.gray800, theme.colors.gray800, theme.colors.gray600);

function flipDir(sort) {
  return sort === "asc" ? "desc" : "asc";
}

function GridTHead(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "checked",
      type: "array",
      required: true
    }, {
      name: "bulkActions",
      type: "array"
    }, {
      name: "columns",
      type: "array"
    }, {
      name: "allColumns",
      type: "array"
    }, {
      name: "sort",
      type: "object"
    }, {
      name: "onSortChange",
      type: "function"
    }, {
      name: "onCheckAllClick",
      type: "function"
    }, {
      name: "onBulkActionClick",
      type: "function"
    }, {
      name: "onColumnsChange",
      type: "function"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });
  var bulkActionButtons = props.bulkActions ? props.bulkActions.map(function (action) {
    var buttonArgs = lodash.pick(action, ["label", "color", "variant", "mIcon"]);
    return _objectSpread2({}, buttonArgs, {
      onClick: function onClick() {
        props.onBulkActionClick(action);
      }
    });
  }) : undefined;
  var allChecked = props.checked.length > 0 && props.checked.every(function (val) {
    return val === true;
  });
  var anyChecked = props.checked.length > 0 && props.checked.some(function (val) {
    return val === true;
  });
  return React__default.createElement(StyledWrapper$3, null, React__default.createElement("tr", null, props.bulkActions && React__default.createElement(StyledTh, {
    key: "_bulk",
    className: "bulk"
  }, React__default.createElement(Checkbox$1, {
    checked: allChecked,
    onClick: props.onCheckAllClick
  })), anyChecked && React__default.createElement(StyledTh, {
    key: "_bulk_actions",
    colSpan: props.columns.length + 1
  }, React__default.createElement(ButtonRow$1, {
    buttons: bulkActionButtons
  })), !anyChecked && React__default.createElement(StyledTh, {
    key: "_actions",
    className: "paddingRight"
  }, props.onColumnsChange !== undefined && React__default.createElement(DataViewColumnControl, {
    onChange: props.onColumnsChange,
    columns: props.columns,
    allColumns: props.allColumns
  }), // We need to indent the actions by 11px to align with the buttons underneath
  !props.onColumnsChange && React__default.createElement("span", {
    style: {
      paddingLeft: "11px"
    }
  }, "Actions")), !anyChecked && props.columns.map(function (column) {
    var onClick = function onClick() {
      props.onSortChange({
        name: column.name,
        dir: clickDir
      });
    };

    var active;
    var Icon;
    var clickDir;

    if (column.sortable) {
      active = props.sort.name === column.name;
      Icon = active && props.sort.dir === "desc" ? ArrowUpwardIcon : ArrowDownwardIcon;
      clickDir = active ? flipDir(props.sort.dir) : "asc";
    }

    return React__default.createElement(StyledTh, {
      key: column.name,
      className: "\n\t\t\t\t\t\t\t\t\t".concat(column.sortable ? "sortable" : "", "\n\t\t\t\t\t\t\t\t\t").concat(active ? "active" : "", "\n\t\t\t\t\t\t\t\t\tpaddingRight\n\t\t\t\t\t\t\t\t")
    }, React__default.createElement("span", {
      className: "columnHeader",
      onClick: column.sortable ? onClick : undefined
    }, column.label, column.sortable && React__default.createElement(Icon, {
      className: "icon"
    })));
  })));
}

function _templateObject$b() {
  var data = _taggedTemplateLiteral(["\n\theight: 40px;\n\n\t", "\n\t&:not(.expandCell) {\n\t\twidth: 1%;\n\t\twhite-space: nowrap;\n\t}\n\n\t", "\n\t&.paddingRight:not(:last-child) {\n\t\tpadding-right: 15px;\n\t}\n"]);

  _templateObject$b = function _templateObject() {
    return data;
  };

  return data;
}
var StyledTd = styled.td(_templateObject$b(),
/* This ensures that the td collapses to it's content size if it doesn't have the .expandCell class */
"",
/* If it has the .paddingRight class, add padding to the right of the cell */
"");

function GridTd(props) {
  var expandCell = props.expandCell !== undefined ? props.expandCell : true;
  var paddingRight = props.paddingRight !== undefined ? props.paddingRight : true;
  return React__default.createElement(StyledTd, {
    className: "\n\t\t\t\t".concat(expandCell ? "expandCell" : "", "\n\t\t\t\t").concat(paddingRight ? "paddingRight" : "", "\n\t\t\t")
  }, React__default.createElement("div", null, props.children));
}

var GridTd$1 = React.memo(GridTd);

function filterAction(action, row) {
  if (action.show === undefined) {
    return true;
  } else if (typeof action.show === "boolean") {
    return action.show;
  } else if (typeof action.show === "function") {
    return action.show({
      row: row
    });
  } else {
    throw new Error("Action ".concat(action.name, ".show must be boolean or a function"));
  }
}

function GridActionsButtonRow(props) {
  var primaryActions = React.useMemo(function () {
    if (props.primaryActions === undefined) {
      return [];
    }

    return props.primaryActions.filter(function (action) {
      return filterAction(action, props.row);
    }).map(function (action, i) {
      var onClick = function onClick() {
        action.onClick({
          data: props.row
        });
      };

      var buttonArgs = lodash.pick(action, ["label", "color", "variant", "mIcon"]);
      return React__default.createElement(Button$1, _extends({
        key: "primary_".concat(i)
      }, buttonArgs, {
        onClick: onClick
      }));
    });
  }, [props.primaryActions, props.row]);
  var additionalActions = React.useMemo(function () {
    if (props.additionalActions === undefined) {
      return [];
    }

    var additionalActions = props.additionalActions.filter(function (action) {
      return filterAction(action, props.row);
    }); // if no valid actions hide the dots

    if (additionalActions.length === 0) {
      return [];
    }

    return [React__default.createElement(Button$1, {
      key: "additional",
      color: "blue",
      variant: "icon",
      mIcon: MoreHorizIcon,
      menuItems: additionalActions.map(function (action) {
        var menuArgs = lodash.pick(action, ["label"]);
        return _objectSpread2({}, menuArgs, {
          onClick: function onClick() {
            action.onClick({
              data: props.row
            });
          }
        });
      })
    })];
  }, [props.additionalActions, props.row]); // concat the buttons into a single row so that we have a single child allowing caching of the ButtonRow

  var buttons = React.useMemo(function () {
    return [].concat(_toConsumableArray(primaryActions), _toConsumableArray(additionalActions));
  }, [primaryActions, additionalActions]);

  if (buttons.length === 0) {
    return null;
  }

  return React__default.createElement(ButtonRow$1, null, buttons);
}

var GridActionsButtonRow$1 = React.memo(GridActionsButtonRow);

function GridTr(props) {
  return React__default.createElement("tr", null, props.bulkActions && React__default.createElement(GridTd$1, {
    key: "_bulk",
    expandCell: false,
    paddingRight: false
  }, React__default.createElement(Checkbox$1, {
    checked: props.checked === true,
    onClick: props.onCheckboxClick
  })), React__default.createElement(GridTd$1, {
    expandCell: false
  }, React__default.createElement(GridActionsButtonRow$1, {
    primaryActions: props.primaryActions,
    additionalActions: props.additionalActions,
    row: props.row
  })), props.columns.map(function (column) {
    return React__default.createElement(GridTd$1, {
      key: column.name,
      className: column.style === "bold" ? "bold" : undefined
    }, props.row[column.name]);
  }));
}

function _templateObject$c() {
  var data = _taggedTemplateLiteral(["\n\t& > tr {\n\t\tborder-bottom: ", ";\n\t}\n\t\n\t& > tr > td {\n\t\tpadding: 5px 0px;\n\t}\n\t\n\t& > tr > td.bold {\n\t\tfont-weight: 600;\n\t}\n\t\n\t& > tr > td > div > .transform_thumbnail {\n\t\tdisplay: block;\n\t}\n"]);

  _templateObject$c = function _templateObject() {
    return data;
  };

  return data;
}
var StyledTBody = styled.tbody(_templateObject$c(), theme.borders.lightGray);

function GridTBody(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "checked",
      type: "array",
      required: true
    }, {
      name: "columns",
      type: "array",
      required: true
    }, {
      name: "data",
      type: "array",
      required: true
    }, {
      name: "primaryActions",
      type: "array"
    }, {
      name: "additionalActions",
      type: "array"
    }, {
      name: "bulkActions",
      type: "array"
    }, {
      name: "onCheckboxClick",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var onCheckboxClick = function onCheckboxClick(i) {
    return function () {
      props.onCheckboxClick(i);
    };
  };

  return React__default.createElement(StyledTBody, null, props.data.map(function (row, i) {
    return React__default.createElement(GridTr, {
      key: row.id || i,
      row: row,
      bulkActions: props.bulkActions,
      primaryActions: props.primaryActions,
      additionalActions: props.additionalActions,
      onCheckboxClick: onCheckboxClick(i),
      checked: props.checked[i],
      columns: props.columns
    });
  }));
}

function _templateObject$d() {
  var data = _taggedTemplateLiteral(["\n\twidth: 100%;\n\tborder-collapse: collapse;\n"]);

  _templateObject$d = function _templateObject() {
    return data;
  };

  return data;
}
var StyledTable = styled.table(_templateObject$d());

function DataViewViewList(props) {
  // todo validate props
  return React__default.createElement(StyledTable, null, React__default.createElement(GridTHead, {
    checked: props.checked,
    columns: props.columns,
    allColumns: props.allColumns,
    bulkActions: props.bulkActions,
    sort: props.sort,
    onSortChange: props.onSortChange,
    onBulkActionClick: props.onBulkActionClick,
    onCheckAllClick: props.onCheckAllClick,
    onColumnsChange: props.onColumnsChange
  }), React__default.createElement(GridTBody, {
    checked: props.checked,
    columns: props.columns,
    data: props.data,
    bulkActions: props.bulkActions,
    additionalActions: props.additionalActions,
    primaryActions: props.primaryActions,
    onCheckboxClick: props.onCheckboxClick
  }));
}

function _templateObject$e() {
  var data = _taggedTemplateLiteral(["\n\t& > .bulkRow {\n\t\tmargin-bottom: 4px;\n\t\tposition: sticky;\n\t\ttop: 0;\n\t\tz-index: 1;\n\t\tbackground: white;\n\t}\n\t\n\t", "\n\t& > .bulkRow:after {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tborder-bottom: ", ";\n\t\tpointer-events: none;\n\t}\n\n\t& > .grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(6, 1fr);\n\t\tgrid-column-gap: 8px;\n\t\tgrid-row-gap: 20px;\n\t}\n\t\n\t& > .grid > .cell {\n\t\tmin-width: 0;\n\t}\n\t\n\t& > .grid > .cell.checked > .image > .checkboxContainer {\n\t\topacity: 1;\n\t}\n\t\n\t& > .grid > .cell.checked > .image > .checkboxContainer > .mask {\n\t\topacity: 1;\n\t\tborder: 2px solid rgba(255, 255, 255, .5);\n\t\tmargin: 6px;\n\t}\n\t\n\t& > .grid > .cell > img {\n\t\tmax-width: 100%;\n\t\tmin-width: 100%;\n\t}\n\t\n\t& > .grid > .cell h2 {\n\t\tmargin: 0;\n\t\tfont-size: 14px;\n\t\tfont-weight: normal;\n\t\twhite-space: nowrap;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t}\n\t\n\t& > .grid > .cell h3 {\n\t\tmargin: 0;\n\t\tfont-weight: normal;\n\t\tfont-size: 12px;\n\t\tcolor: ", ";\n\t}\n\t\n\t& > .grid > .cell .image {\n\t\tposition: relative;\n\t}\n\t\n\t& > .grid > .cell > .image > .checkboxContainer {\n\t\topacity: 0;\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tleft: 0px;\n\t\ttransition: opacity 150ms;\n\t}\n\t\n\t& > .grid > .cell > .image:hover > .checkboxContainer {\n\t\topacity: 1;\n\t}\n\t\n\t& > .grid > .cell > .image > .checkboxContainer > .mask {\n\t\tposition: absolute;\n\t\twidth: 18px;\n\t\theight: 18px;\n\t\tleft: 4px;\n\t\ttop: 4px;\n\t\tmargin: 8px;\n\t\tbackground: white;\n\t\tborder-radius: 3px;\n\t\topacity: .8;\n\t}\n\t\n\t& > .grid > .cell .image img {\n\t\twidth: 100%;\n\t}\n\t\n\t& > .grid > .cell .info {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmax-width: 100%;\n\t}\n\t\n\t& > .grid > .cell > .info > .left {\n\t\tmin-width: 0;\n\t}\n\t\n\t& > .grid > .cell > .info > .right {\n\t\tflex-shrink: 0;\n\t}\n"]);

  _templateObject$e = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$3 = styled.div(_templateObject$e(),
/* Borders on sticky elements don't carry through, so we put them on the :after element */
"", theme.borders.gray, theme.colors.lightGray);

function DataViewViewGrid(props) {
  // TODO VALIDATE PROPS
  var checkboxClick = function checkboxClick(i) {
    return function () {
      props.onCheckboxClick(i);
    };
  };

  var bulkActionButtons = props.bulkActions ? props.bulkActions.map(function (action) {
    var buttonArgs = lodash.pick(action, ["label", "color", "variant", "mIcon"]);
    return _objectSpread2({}, buttonArgs, {
      onClick: function onClick() {
        props.onBulkActionClick(action);
      }
    });
  }) : undefined;
  var allChecked = props.checked.length > 0 && props.checked.every(function (val) {
    return val === true;
  });
  var anyChecked = props.checked.length > 0 && props.checked.some(function (val) {
    return val === true;
  });
  return React__default.createElement(StyledDiv$3, null, React__default.createElement("div", {
    className: "bulkRow"
  }, props.bulkActions && React__default.createElement(Checkbox$1, {
    checked: allChecked,
    onClick: props.onCheckAllClick
  }), anyChecked && React__default.createElement(ButtonRow$1, {
    buttons: bulkActionButtons
  })), React__default.createElement("div", {
    className: "grid"
  }, props.data.map(function (row, i) {
    return React__default.createElement("div", {
      className: "\n\t\t\t\t\t\t\t\t\tcell\n\t\t\t\t\t\t\t\t\t".concat(props.checked[i] === true ? "checked" : "", "\n\t\t\t\t\t\t\t\t"),
      key: row.id
    }, React__default.createElement("div", {
      className: "image"
    }, React__default.createElement("div", {
      className: "checkboxContainer"
    }, React__default.createElement("div", {
      className: "mask"
    }), React__default.createElement(Checkbox$1, {
      className: "checkbox",
      checked: props.checked[i] === true,
      onClick: checkboxClick(i)
    })), row.image), React__default.createElement("div", {
      className: "info"
    }, React__default.createElement("div", {
      className: "left"
    }, React__default.createElement("h2", null, row.primary), React__default.createElement("h3", null, row.secondary)), React__default.createElement("div", {
      className: "right"
    }, React__default.createElement(GridActionsButtonRow$1, {
      primaryActions: props.primaryActions,
      additionalActions: props.additionalActions,
      row: row
    }))));
  })));
}

function DataViewViewSaveDrawerContent(props) {
  var _useState = React.useState(_objectSpread2({}, props.data)),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var onSave =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return props.onSave(_objectSpread2({}, state));

            case 2:
              props.onClose();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function onSave() {
      return _ref.apply(this, arguments);
    };
  }();

  var onSubmit = function onSubmit(event) {
    event.preventDefault();
    onSave();
  };

  var handleChange = function handleChange(name) {
    return function (event) {
      setState(_objectSpread2({}, state, _defineProperty({}, name, event.target.value)));
    };
  };

  var handleSwitch = function handleSwitch(name) {
    return function (event) {
      setState(_objectSpread2({}, state, {
        type: event.target.checked ? "shared" : "mine"
      }));
    };
  };

  return React__default.createElement(DrawerContent$1, {
    title: "Save View",
    onSave: onSave,
    onClose: props.onClose,
    onCancel: props.onClose,
    background: "gray"
  }, React__default.createElement("form", {
    onSubmit: onSubmit,
    autoComplete: "off"
  }, React__default.createElement(FormGroup, {
    row: true
  }, React__default.createElement(TextField, {
    autoFocus: true,
    id: "label",
    label: "Label",
    value: state.label,
    onChange: handleChange("label"),
    fullWidth: true,
    required: true,
    variant: "filled"
  })), React__default.createElement(FormGroup, {
    row: true
  }, React__default.createElement(FormControl, {
    margin: "normal"
  }, React__default.createElement(FormControlLabel, {
    control: React__default.createElement(Switch, {
      checked: state.type === "shared",
      onChange: handleSwitch(),
      value: "what",
      color: "primary"
    }),
    label: "Show for all Users"
  })))));
}

function DataViewViewSaveDrawer(props) {
  return React__default.createElement(Drawer, {
    open: props.open,
    onClose: props.onClose
  }, React__default.createElement(DataViewViewSaveDrawerContent, {
    data: props.data,
    onClose: props.onClose,
    onSave: props.onSave
  }));
}

function DataViewViewDrawerContent(props) {
  var _useState = React.useState({
    options: undefined,
    loading: true,
    formOpen: false,
    formData: undefined
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  React.useEffect(function () {
    function getOptions() {
      return _getOptions.apply(this, arguments);
    }

    function _getOptions() {
      _getOptions = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var results;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.onGetOptions();

              case 2:
                results = _context.sent;
                setState(_objectSpread2({}, state, {
                  loading: false,
                  options: results
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _getOptions.apply(this, arguments);
    }

    getOptions();
  }, [state.loading]);

  var closeForm = function closeForm() {
    setState(_objectSpread2({}, state, {
      options: undefined,
      loading: true,
      formOpen: false,
      formData: undefined
    }));
  };

  var DataViewConfig = {
    primaryActions: [{
      name: "select",
      variant: "text",
      label: "Select",
      color: "blue",
      onClick: function () {
        var _onClick = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2(_ref) {
          var data;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  data = _ref.data;
                  _context2.next = 3;
                  return props.onChange(data);

                case 3:
                  props.onClose();

                case 4:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function onClick(_x) {
          return _onClick.apply(this, arguments);
        }

        return onClick;
      }()
    }, {
      name: "edit",
      show: function show(_ref2) {
        var row = _ref2.row;
        return row.type !== "default";
      },
      variant: "icon",
      color: "blue",
      mIcon: CreateIcon,
      onClick: function onClick(_ref3) {
        var data = _ref3.data;
        setState({
          formOpen: true,
          formData: data
        });
      }
    }],
    additionalActions: [{
      name: "remove",
      show: function show(_ref4) {
        var row = _ref4.row;
        return row.type !== "default";
      },
      label: "Remove",
      onClick: function () {
        var _onClick2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee3(_ref5) {
          var data;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  data = _ref5.data;
                  _context3.next = 3;
                  return props.onRemove(data);

                case 3:
                  setState(_objectSpread2({}, state, {
                    options: undefined,
                    loading: true
                  }));

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function onClick(_x2) {
          return _onClick2.apply(this, arguments);
        }

        return onClick;
      }()
    }],
    data: state.options,
    loading: state.loading,
    view: "list",
    columns: [{
      name: "label",
      label: "Label"
    }, {
      name: "type",
      label: "Type"
    }],
    activeColumns: ["label", "type"]
  };
  return React__default.createElement(DrawerContent$1, {
    title: "Saved Views",
    onClose: props.onClose
  }, state.options && React__default.createElement(DataView, DataViewConfig), React__default.createElement(DataViewViewSaveDrawer, {
    open: state.formOpen,
    data: state.formData,
    onClose: closeForm,
    onSave: props.onSave
  }));
}

function DataViewViewDrawer(props) {
  return React__default.createElement(Drawer, {
    open: props.open,
    onClose: props.onClose
  }, React__default.createElement(DataViewViewDrawerContent, {
    onClose: props.onClose,
    onSave: props.onSave,
    onRemove: props.onRemove,
    onChange: props.onChange,
    onGetOptions: props.onGetOptions
  }));
}

function _templateObject$f() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: inline-flex;\n\talign-items: center;\n\t\n\t& > .icon {\n\t\tmargin-right: 3px;\n\t}\n"]);

  _templateObject$f = function _templateObject() {
    return data;
  };

  return data;
}
var ViewSpan = styled.span(_templateObject$f());

function DataViewViewControls(props) {
  var _useState = React.useState({
    viewOpen: false,
    saveOpen: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var toggleViewDrawer = function toggleViewDrawer() {
    setState(_objectSpread2({}, state, {
      viewOpen: !state.viewOpen
    }));
  };

  var toggleSaveDrawer = function toggleSaveDrawer() {
    setState(_objectSpread2({}, state, {
      saveOpen: !state.saveOpen
    }));
  };

  var ViewLabel = React__default.createElement(ViewSpan, null, React__default.createElement(ViewQuiltIcon, {
    className: "icon"
  }), " ", props.savedView.label);
  var saveMenuItems = [{
    label: "Save as New View",
    onClick: function onClick() {
      toggleSaveDrawer();
    }
  }, {
    label: "Overwrite Current View",
    disabled: props.savedView.type === "default",
    onClick: function () {
      var _onClick = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.savedViewCallbacks.onSave(_objectSpread2({}, props.savedView, {
                  state: props.savedViewState
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function onClick() {
        return _onClick.apply(this, arguments);
      }

      return onClick;
    }()
  }];
  var savedViewData = {
    id: undefined,
    label: props.savedView.type === "default" ? "" : props.savedView.label,
    type: props.savedView.type === "default" ? "mine" : props.savedView.type,
    state: props.savedViewState
  };
  return React__default.createElement("div", null, React__default.createElement("div", {
    className: "right"
  }, React__default.createElement(ButtonRow$1, null, React__default.createElement(Button$1, {
    mIcon: ExpandMoreIcon,
    iconPosition: "right",
    label: "Save As",
    variant: "outlined",
    color: "blue",
    menuItems: saveMenuItems
  }), React__default.createElement(Button$1, {
    mIcon: ExpandMoreIcon,
    iconPosition: "right",
    label: ViewLabel,
    variant: "contained",
    color: "lightBlue",
    onClick: toggleViewDrawer
  }))), React__default.createElement(DataViewViewSaveDrawer, {
    open: state.saveOpen,
    data: savedViewData,
    onClose: toggleSaveDrawer,
    onSave: props.savedViewCallbacks.onSave
  }), React__default.createElement(DataViewViewDrawer, {
    open: state.viewOpen,
    onClose: toggleViewDrawer,
    onRemove: props.savedViewCallbacks.onRemove,
    onSave: props.savedViewCallbacks.onSave,
    onChange: props.savedViewCallbacks.onChange,
    onGetOptions: props.savedViewCallbacks.onGetOptions
  }));
}

function _templateObject$g() {
  var data = _taggedTemplateLiteral(["\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n\twidth: 100%;\n\t\n\t& > .left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\t\n\t& > .left > *:last-child {\n\t\tdisplay: flex;\n\t\tmargin-right: 0px;\n\t}\n\t\n\t& > .left > h1 {\n\t\t", "\n\t\tmargin-right: 20px;\n\t}\n"]);

  _templateObject$g = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$4 = styled.div(_templateObject$g(), theme.h1);

function TitleBar(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "title",
      type: "string"
    }, {
      name: "buttons",
      type: "array"
    }, {
      name: "savedViewEnabled",
      type: "boolean"
    }, {
      name: "savedView",
      type: "object"
    }, {
      name: "savedViewState",
      type: "object"
    }, {
      name: "savedViewCallbacks",
      type: "object"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });
  var buttons = React.useMemo(function () {
    if (props.buttons === undefined) {
      return;
    }

    return props.buttons.map(function (button) {
      var name = button.name,
          buttonArgs = _objectWithoutProperties(button, ["name"]);

      return buttonArgs;
    });
  }, [props.buttons]);
  return React__default.createElement(StyledWrapper$4, null, React__default.createElement("div", {
    className: "left"
  }, props.title && React__default.createElement("h1", null, props.title), props.buttons && React__default.createElement(ButtonRow$1, {
    buttons: buttons
  })), props.savedViewEnabled && React__default.createElement(DataViewViewControls, {
    savedView: props.savedView,
    savedViewState: props.savedViewState,
    savedViewCallbacks: props.savedViewCallbacks
  }));
}

function _templateObject$h() {
  var data = _taggedTemplateLiteral(["\n\n"]);

  _templateObject$h = function _templateObject() {
    return data;
  };

  return data;
}
var StyledSpan = styled.span(_templateObject$h());

function DataViewViewSwitcher(props) {
  var Icon = props.view === "list" ? FormatListBulletedIcon : GridOnIcon;
  var menuItems = [];

  if (props.view === "list") {
    menuItems.push({
      label: "Grid",
      mIcon: GridOnIcon,
      onClick: function onClick() {
        props.onViewChange("grid");
      }
    });
  } else {
    menuItems.push({
      label: "List",
      mIcon: FormatListBulletedIcon,
      onClick: function onClick() {
        props.onViewChange("list");
      }
    });
  }

  return React__default.createElement(StyledSpan, null, React__default.createElement(Button$1, {
    variant: "text",
    color: "black",
    label: React__default.createElement(Icon, null),
    iconPosition: "right",
    mIcon: ExpandMoreIcon,
    menuItems: menuItems
  }));
}

function DataViewPager(props) {
  var totalPages = Math.ceil(props.count / props.limit);
  var currentPage = (props.skip + props.limit) / props.limit;
  var startItem = props.skip + 1;
  var endItem = Math.min(props.skip + props.limit, props.count);

  var skipClick = function skipClick(skip) {
    return function () {
      props.onSkipChange({
        skip: skip
      });
    };
  };

  var previousDisabled = currentPage === 1;
  var nextDisabled = currentPage === totalPages;

  if (totalPages === 0) {
    return null;
  }

  return React__default.createElement("span", null, React__default.createElement(Button$1, {
    color: "blue",
    variant: "icon",
    mIcon: ChevronLeftIcon,
    onClick: skipClick(props.skip - props.limit),
    disabled: previousDisabled
  }), startItem, "-", endItem, " of ", props.count, React__default.createElement(Button$1, {
    color: "blue",
    variant: "icon",
    mIcon: ChevronRightIcon,
    onClick: skipClick(props.skip + props.limit),
    disabled: nextDisabled
  }));
}

function DataViewLimit(props) {
  var menuItems = React.useMemo(function () {
    return props.options.map(function (val) {
      return {
        label: val.toString(),
        onClick: function onClick() {
          props.onLimitChange({
            limit: val
          });
        }
      };
    });
  }, [props.options, props.onLimitChange]);
  return React__default.createElement(Button$1, {
    color: "black",
    label: props.limit,
    variant: "text",
    iconPosition: "right",
    mIcon: ExpandMoreIcon,
    menuItems: menuItems
  });
}

var DataViewLimit$1 = React.memo(DataViewLimit);

function _templateObject2$3() {
  var data = _taggedTemplateLiteral(["\n\t&.loading {\n\t\topacity: .5;\n\t\tpointer-events: none;\n\t}\n"]);

  _templateObject2$3 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$i() {
  var data = _taggedTemplateLiteral(["\n\t& {\n\t\tmargin-bottom: 1em;\n\t}\n\t\n\t& > .filterRow {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\t\n\t& > .filterRow > * {\n\t\tmargin-right: 5px;\n\t}\n"]);

  _templateObject$i = function _templateObject() {
    return data;
  };

  return data;
}
var StyledDiv$4 = styled.div(_templateObject$i());
var PopoverDiv = styled.div(_templateObject2$3());

function DataViewFilters(props) {
  var activeFilters = props.activeFilters || [];
  var primaryFilters = props.filters.filter(function (val) {
    return val.type === "primary";
  });
  var primaryFilterNames = primaryFilters.map(function (val) {
    return val.name;
  });
  var optionalFilters = props.filters.filter(function (val) {
    return val.type !== "primary";
  });
  var active = optionalFilters.filter(function (val) {
    return activeFilters.includes(val.name);
  });
  var options = optionalFilters.map(function (val) {
    return {
      label: val.label,
      value: val.name
    };
  });

  var onRemove = function onRemove(name) {
    return function () {
      var activeFilters = lodash.xor(props.activeFilters, [name]);
      onActiveFiltersChange(activeFilters);
    };
  };

  var onActiveFiltersChange = function onActiveFiltersChange(activeFilters) {
    var filter = lodash.pick(props.filter, [].concat(_toConsumableArray(primaryFilterNames), _toConsumableArray(activeFilters))); // we only want to pass a new filter obj if we have actually removed a key from it, to prevent unnecessary re-fetches of data

    var setFilter = Object.keys(filter).join(",") !== Object.keys(props.filter).join(",");
    props.onActiveFiltersChange({
      activeFilters: activeFilters,
      filter: setFilter === true ? filter : props.filter
    });
  };

  return React__default.createElement(StyledDiv$4, null, React__default.createElement("div", {
    className: "filterRow"
  }, primaryFilters.map(function (filter) {
    var Component = filter.component;
    return React__default.createElement(Component, {
      key: filter.name,
      label: filter.label,
      type: filter.type,
      args: filter.args || {},
      data: props.filter[filter.name] || {},
      onRemove: onRemove(filter.name),
      onChange: filter.onChange
    });
  }), React__default.createElement(Button$1, {
    label: "More",
    variant: "text",
    color: "gray",
    iconPosition: "right",
    mIcon: ExpandMoreIcon,
    popover: React__default.createElement(PopoverDiv, {
      className: "\n\t\t\t\t\t\t\t\t".concat(props.loading ? "loading" : "", "\n\t\t\t\t\t\t\t")
    }, React__default.createElement(CheckboxList, {
      options: options,
      checked: activeFilters,
      onChange: onActiveFiltersChange
    }))
  })), React__default.createElement("div", {
    className: "filterRow optionalFilters"
  }, active.map(function (filter) {
    var Component = filter.component;
    return React__default.createElement(Component, {
      key: filter.name,
      label: filter.label,
      type: filter.type,
      args: filter.args || {},
      data: props.filter[filter.name] || {},
      onRemove: onRemove(filter.name),
      onChange: filter.onChange
    });
  })));
}

function transformColumn(row, column) {
  var data = row[column.column || column.name];

  if (data !== undefined && column.transforms !== undefined) {
    for (var _i = 0, _Object$entries = Object.entries(column.transforms); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          transform = _Object$entries$_i[1];

      data = transform(data);
    }
  }

  return data;
}
function transformRows(rows, columns) {
  var newRows = rows.map(function (row) {
    var newRow = _objectSpread2({}, row);

    columns.forEach(function (column) {
      newRow[column.name] = transformColumn(row, column);
    });
    return newRow;
  });
  return newRows;
}

function _templateObject$j() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tfont-weight: 400;\n\tfont-size: 14px;\n\tdisplay: flex;\n\tflex-direction: column;\n\t\n\t& > .headerRow {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\t-ms-flex: 0 0 auto;\n\t\t-webkit-flex: 0 0 auto;\n\t\tflex: 0 0 auto;\n\t}\n\n\t& > .headerRow.title {\n\t\tmargin-left: 6px;\n\t}\n\t\n\t& > .headerRow > .right {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t& > .viewContainer {\n\t\toverflow: auto;\n\t}\n\t\n\t&.loading {\n\t\topacity: .5;\n\t\tpointer-events: none;\n\t}\n\n\t&.sticky {\n\t\theight: 100%;\n\t}\n"]);

  _templateObject$j = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$5 = styled.div(_templateObject$j(), theme.fontFamily);
var actionValidation = {
  type: "object",
  schema: [{
    name: "name",
    type: "string",
    required: true
  }, {
    name: "onClick",
    type: "function",
    required: true
  }, {
    name: "show",
    type: "any"
  }, {
    name: "label",
    type: "string"
  }, {
    name: "color",
    type: "string"
  }, {
    name: "variant",
    type: "string"
  }, {
    name: "mIcon",
    type: "object"
  }],
  allowExtraKeys: false
};

function DataView(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "title",
      type: "string"
    }, {
      name: "columns",
      type: "array",
      schema: {
        type: "object",
        schema: [{
          name: "name",
          type: "string",
          required: true
        }, {
          name: "column",
          type: "string"
        }, {
          name: "label",
          type: "string"
        }, {
          name: "style",
          type: "string",
          "enum": ["bold"]
        }, {
          name: "sortable",
          type: "boolean"
        }, {
          name: "transforms",
          type: "array",
          schema: {
            type: "function"
          }
        }],
        allowExtraKeys: false
      }
    }, {
      name: "filters",
      type: "array"
    }, {
      name: "filter",
      type: "object"
    }, {
      name: "activeFilters",
      type: "array",
      schema: {
        type: "string"
      }
    }, {
      name: "activeColumns",
      type: "array",
      schema: {
        type: "string"
      }
    }, {
      name: "primaryActions",
      type: "array",
      schema: actionValidation
    }, {
      name: "bulkActions",
      type: "array",
      schema: actionValidation
    }, {
      name: "additionalActions",
      type: "array",
      schema: actionValidation
    }, {
      name: "buttons",
      type: "array"
    }, {
      name: "view",
      type: "string",
      "enum": ["list", "grid"],
      required: true // TODO: not make this required!

    }, {
      name: "savedView",
      type: "object",
      schema: [{
        name: "id",
        type: "string"
      }, {
        name: "label",
        type: "string"
      }, {
        name: "type",
        type: "string",
        "enum": ["default", "shared", "mine"]
      }, {
        name: "state",
        type: "object"
      }],
      allowExtraKeys: false
    }, {
      name: "views",
      type: "array",
      schema: {
        type: "string",
        "enum": ["list", "grid"]
      }
    }, {
      name: "data",
      type: "array"
    }, {
      name: "count",
      type: "number"
    }, {
      name: "sort",
      type: "object",
      schema: [{
        name: "name",
        type: "string"
      }, {
        name: "dir",
        type: "string",
        "enum": ["asc", "desc"]
      }],
      allowExtraKeys: false
    }, {
      name: "limit",
      type: "number"
    }, {
      name: "limitOptions",
      type: "array",
      schema: {
        type: "number"
      }
    }, {
      name: "skip",
      type: "number"
    }, {
      name: "loading",
      type: "boolean"
    }, {
      name: "sticky",
      type: "boolean"
    }, {
      name: "onSkipChange",
      type: "function"
    }, {
      name: "onLimitChange",
      type: "function"
    }, {
      name: "onSortChange",
      type: "function"
    }, {
      name: "onViewChange",
      type: "function"
    }, {
      name: "onActiveFiltersChange",
      type: "function"
    }, {
      name: "onColumnsChange",
      type: "function"
    }, {
      name: "onSavedViewSave",
      type: "function"
    }, {
      name: "onSavedViewChange",
      type: "function"
    }, {
      name: "onSavedViewRemove",
      type: "function"
    }, {
      name: "onSavedViewGetOptions",
      type: "function"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  }); // declare the hooks

  var _useState = React.useState({
    checked: []
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var savedViewEnabled = props.onSavedViewSave !== undefined && props.onSavedViewChange !== undefined && props.onSavedViewGetOptions !== undefined && props.onSavedViewRemove !== undefined && props.savedView !== undefined;

  var onCheckAllClick = function onCheckAllClick() {
    var allChecked = state.checked.every(function (val) {
      return val === true;
    });
    setState(_objectSpread2({}, state, {
      checked: state.checked.map(function (val) {
        return !allChecked;
      })
    }));
  };

  var onBulkActionClick = function onBulkActionClick(action) {
    var checkedData = props.data.filter(function (val, i) {
      return state.checked[i] === true;
    });
    action.onClick({
      data: checkedData
    });
  };

  var onCheckboxClick = function onCheckboxClick(i) {
    var newChecked = _toConsumableArray(state.checked);

    newChecked[i] = !newChecked[i];
    setState(_objectSpread2({}, state, {
      checked: newChecked
    }));
  };

  var onActionClick = function onActionClick(action, row) {
    action.onClick({
      data: row
    });
  };

  React.useEffect(function () {
    setState(_objectSpread2({}, state, {
      checked: props.data.map(function (val) {
        return false;
      })
    }));
  }, [props.data]);
  var View = props.view === "list" ? DataViewViewList : DataViewViewGrid; // generate an array of columns based on the ones that are marked active

  var activeColumnObjs = React.useMemo(function () {
    return props.activeColumns.map(function (name) {
      var column = props.columns.find(function (val) {
        return val.name === name;
      });
      return column;
    });
  }, [props.activeColumns, props.columns]); // execute the transforms in the rows

  var transformedData = React.useMemo(function () {
    return transformRows(props.data, props.view === "list" ? activeColumnObjs : props.columns);
  }, [props.data, props.view, props.columns, activeColumnObjs]);
  var savedViewState = {
    limit: props.limit,
    sort: props.sort,
    view: props.view,
    filter: props.filter,
    activeFilters: props.activeFilters,
    activeColumns: props.activeColumns
  };
  var savedViewCallbacks = {
    onSave: props.onSavedViewSave,
    onChange: props.onSavedViewChange,
    onGetOptions: props.onSavedViewGetOptions,
    onRemove: props.onSavedViewRemove
  };
  var limitOptions = React.useMemo(function () {
    return props.limitOptions || [25, 50, 100];
  }, [props.limitOptions]);
  return React__default.createElement(StyledWrapper$5, {
    className: "\n\t\t\t".concat(props.loading ? "loading" : "", "\n\t\t\t").concat(props.sticky ? "sticky" : "", "\n\t\t")
  }, React__default.createElement("div", {
    className: "headerRow title"
  }, React__default.createElement(TitleBar, {
    title: props.title,
    buttons: props.buttons,
    savedViewEnabled: savedViewEnabled,
    savedView: props.savedView,
    savedViewState: savedViewState,
    savedViewCallbacks: savedViewCallbacks
  })), React__default.createElement("div", {
    className: "headerRow filters"
  }, React__default.createElement("div", {
    className: "left"
  }, props.filters && React__default.createElement(DataViewFilters, {
    loading: props.loading,
    filter: props.filter,
    filters: props.filters,
    activeFilters: props.activeFilters,
    onActiveFiltersChange: props.onActiveFiltersChange
  })), React__default.createElement("div", {
    className: "right"
  }, props.views !== undefined && React__default.createElement(DataViewViewSwitcher, {
    view: props.view,
    views: props.views,
    onViewChange: props.onViewChange
  }), props.onLimitChange !== undefined && React__default.createElement(DataViewLimit$1, {
    limit: props.limit,
    options: limitOptions,
    onLimitChange: props.onLimitChange
  }), props.onSkipChange !== undefined && React__default.createElement(DataViewPager, {
    limit: props.limit,
    skip: props.skip,
    count: props.count,
    onSkipChange: props.onSkipChange
  }))), React__default.createElement("div", {
    className: "\n\t\t\t\t\tviewContainer\n\t\t\t\t"
  }, React__default.createElement(View, {
    checked: state.checked,
    columns: activeColumnObjs,
    allColumns: props.columns,
    bulkActions: props.bulkActions,
    sort: props.sort,
    data: transformedData,
    additionalActions: props.additionalActions,
    primaryActions: props.primaryActions,
    onSortChange: props.onSortChange,
    onColumnsChange: props.onColumnsChange,
    onBulkActionClick: onBulkActionClick,
    onCheckAllClick: onCheckAllClick,
    onActionClick: onActionClick,
    onCheckboxClick: onCheckboxClick
  })), props.loading === false && !props.data.length && React__default.createElement("div", {
    className: "noResults"
  }, React__default.createElement("p", null, "No results were found.")));
}

function _templateObject$k() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tdisplay: inline-flex;\n\talign-items: center;\n\tpadding: 6px;\n\tcursor: pointer;\n\tborder-radius: 4px;\n\ttransition: background-color ", ";\n\t\n\t&.primary {\n\t\tcolor: ", ";\n\t}\n\t\n\t&.primary:hover {\n\t\tbackground: ", "23;\n\t}\n\t\n\t&.optional {\n\t\tcolor: ", ";\n\t\tbackground: ", "13;\n\t}\n\t\n\t&.optional:hover {\n\t\tbackground: ", "23;\n\t}\n\t\n\t& > .label {\n\t\tmargin-right: 8px;\n\t\tfont-weight: 500;\n\t}\n\t\n\t& > .valueBlock {\n\t\tdisplay: inline-flex;\n\t\talign-items: center;\n\t}\n\t\n\t& > .valueBlock > .value {\n\t\tfont-weight: bold;\n\t}\n\t\n\t& > .valueBlock > .dropdownIcon {\n\t\tfont-size: 20px;\n\t}\n\t\n\t&.primary > .valueBlock > .value {\n\t\tcolor: black;\n\t}\n\t\n\t& > .remove {\n\t\tmargin-left: 8px;\n\t\tfont-size: 13px;\n\t\tcolor: black;\n\t\tpadding: 3px;\n\t\tborder-radius: 20px;\n\t\ttransition: background-color ", ";\n\t}\n\t\n\t& > .remove:hover {\n\t\tbackground-color: ", "45;\n\t}\n"]);

  _templateObject$k = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$6 = styled.div(_templateObject$k(), theme.fontFamily, theme.animations.backgroundMs, theme.colors.lightGray, theme.colors.lightGray, theme.colors.blue, theme.colors.blue, theme.colors.blue, theme.animations.backgroundMs, theme.colors.blue);

function DataViewPrimaryFilter(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "label",
      type: "string",
      required: true
    }, {
      name: "value",
      type: "string"
    }, {
      name: "type",
      type: "string",
      "enum": ["primary", "optional"],
      required: true
    }, {
      name: "onRemove",
      type: "function",
      required: true
    }, {
      name: "onClick",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var remove = function remove(e) {
    // stops the outer wrapping click handler from firing
    e.stopPropagation(); // call the passed in onRemove function

    props.onRemove();
  };

  return React__default.createElement(StyledWrapper$6, {
    onClick: props.onClick,
    className: "\n\t\t\t\t".concat(props.type, "\n\t\t\t")
  }, React__default.createElement("span", {
    className: "label"
  }, props.label, ": "), React__default.createElement("span", {
    className: "valueBlock"
  }, React__default.createElement("span", {
    className: "value"
  }, props.value || "any"), React__default.createElement(ExpandMoreIcon, {
    className: "dropdownIcon"
  })), props.type === "optional" && React__default.createElement(CloseIcon, {
    className: "remove",
    onClick: remove
  }));
}

function _templateObject$l() {
  var data = _taggedTemplateLiteral(["\n\t& {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\tmargin-top: 1rem;\n\t}\n"]);

  _templateObject$l = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$7 = styled.div(_templateObject$l());

function DataViewFilterDropdownButtons(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "onClear",
      type: "function"
    }, {
      name: "onCancel",
      type: "function"
    }, {
      name: "onApply",
      type: "function"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });
  return React__default.createElement(StyledWrapper$7, null, React__default.createElement(ButtonRow$1, null, React__default.createElement(Button$1, {
    label: "Clear",
    color: "black",
    variant: "text",
    onClick: props.onClear
  })), React__default.createElement(ButtonRow$1, null, React__default.createElement(Button$1, {
    label: "Cancel",
    color: "black",
    variant: "text",
    onClick: props.onCancel
  }), React__default.createElement(Button$1, {
    label: "Apply",
    color: "blue",
    variant: "contained",
    onClick: props.onApply
  })));
}

function _templateObject$m() {
  var data = _taggedTemplateLiteral(["\n\t& > .inputRow {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\t\n\t& > .inputRow > .disabled {\n\t\tbackground: #eee;\n\t}\n\t\n\t& > .inputRow > .comparisonButton {\n\t\tmargin-top: 8px;\n\t\tmargin-bottom: 4px;\n\t\tmargin-left: 10px;\n\t}\n\t\n\t& .MuiOutlinedInput-root.Mui-focused fieldset {\n\t\tborder-color: ", ";\n\t}\n\t\n\t& .comparisonContainer {\n\t\tborder-left: 1px solid #ccc;\n\t\tmargin: 5px;\n\t\tpadding-left: 5px;\n\t\tflex-shrink: 0;\n\t}\n"]);

  _templateObject$m = function _templateObject() {
    return data;
  };

  return data;
}
var StyledContents = styled.div(_templateObject$m(), theme.colors.blue);
var existsComparisons = ["exists", "not_exists"];

function DataViewFilterTextDropdownContent(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "value",
      type: "string",
      required: true
    }, {
      name: "onChange",
      type: "function",
      required: true
    }, {
      name: "comparison",
      type: "string",
      required: true
    }, {
      name: "comparisons",
      type: "array"
    }, {
      name: "onClose",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState({
    value: props.value,
    comparison: props.comparison
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var activeComparison = props.comparisons ? props.comparisons.find(function (val) {
    return val.value === state.comparison;
  }) : undefined;

  var onApply = function onApply() {
    if (existsComparisons.includes(state.comparison)) {
      // for these the value is not relevant
      props.onChange({
        comparison: state.comparison
      });
    } else if (state.value === "") {
      // if the state is empty we wipe the whole object
      props.onChange(undefined);
    } else {
      // set both values
      props.onChange({
        value: state.value,
        comparison: state.comparison
      });
    }

    props.onClose();
  };

  var onClear = function onClear() {
    setState(_objectSpread2({}, state, {
      value: "",
      comparison: "equals"
    }));
  };

  var onInputChange = function onInputChange(event) {
    setState(_objectSpread2({}, state, {
      value: event.target.value
    }));
  };

  var onKeyPress = function onKeyPress(event) {
    if (event.key === "Enter") {
      onApply();
    }
  };

  var disabled = existsComparisons.includes(state.comparison);
  var comparisonButton;

  if (props.comparisons) {
    var menuItems = props.comparisons.map(function (comparison) {
      return {
        label: comparison.label,
        onClick: function onClick() {
          var stateChange = _objectSpread2({}, state); // for exists and not_exists we want to clear the value


          if (existsComparisons.includes(comparison.value) === true) {
            stateChange.value = "";
          }

          stateChange.comparison = comparison.value;
          setState(stateChange);
        }
      };
    });
    comparisonButton = React__default.createElement(Button$1, {
      className: "comparisonButton",
      label: activeComparison.label,
      variant: "text",
      color: "gray",
      iconPosition: "right",
      mIcon: ExpandMoreIcon,
      menuItems: menuItems
    });
  }

  return React__default.createElement(StyledContents, null, React__default.createElement("div", {
    className: "inputRow"
  }, React__default.createElement(TextField, {
    autoFocus: true,
    className: disabled ? "disabled" : "",
    disabled: disabled,
    placeholder: "Filter...",
    margin: "dense",
    value: state.value,
    variant: "outlined",
    onChange: onInputChange,
    onKeyPress: onKeyPress
  }), comparisonButton), React__default.createElement(DataViewFilterDropdownButtons, {
    onApply: onApply,
    onClear: onClear,
    onCancel: props.onClose
  }));
}

function _templateObject$n() {
  var data = _taggedTemplateLiteral(["\n\tfont-family: ", ";\n\tpadding: 10px;\n\tborder-radius: 8px;\n\tbackground: white;\n"]);

  _templateObject$n = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$8 = styled.div(_templateObject$n(), theme.fontFamily);

function DataViewFilterDropdown(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "anchorEl",
      type: "object"
    }, {
      name: "children",
      type: "object"
    }, {
      name: "onClose",
      type: "function"
    }, {
      name: "onEntered",
      type: "function"
    }, {
      name: "onExited",
      type: "function"
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  }); // track whether the content of the dropdown should be visible

  var _useState = React.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      exists = _useState2[0],
      setExists = _useState2[1]; // if the anchorEl exists, we phase in


  React.useEffect(function () {
    if (Boolean(props.anchorEl) === true) {
      setExists(true);
    }
  }, [props.anchorEl]); // wait for the animation to complete before hiding

  var onExited = function onExited() {
    setExists(false);

    if (props.onExited) {
      props.onExited();
    }
  }; // avoid processing the content of the dropdown until we have been invoked


  if (exists === false) {
    return null;
  }

  return React__default.createElement(Popover, {
    anchorEl: props.anchorEl,
    onClose: props.onClose,
    open: Boolean(props.anchorEl),
    TransitionProps: {
      onExited: onExited,
      onEntered: props.onEntered
    }
  }, React__default.createElement(StyledWrapper$8, null, props.children));
}

function _templateObject$o() {
  var data = _taggedTemplateLiteral(["\n\t\n"]);

  _templateObject$o = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$9 = styled.span(_templateObject$o());
var validComparisons = [{
  label: "Contains",
  value: "contains"
}, {
  label: "Not Contains",
  value: "not_contains"
}, {
  label: "Equals",
  value: "equals"
}, {
  label: "Not Equal",
  value: "not_equals"
}, {
  label: "Exists",
  value: "exists"
}, {
  label: "Not Exists",
  value: "not_exists"
}];
var validComparisonNames = validComparisons.map(function (val) {
  return val.value;
});
var comparisonMap = {
  equals: "",
  not_equals: "!=",
  contains: "~",
  not_contains: "!~"
};

function DataViewFilterText(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "label",
      type: "string",
      required: true
    }, {
      name: "data",
      type: "object",
      schema: [{
        name: "value",
        type: "string"
      }, {
        name: "comparison",
        type: "string",
        "enum": validComparisonNames
      }],
      allowExtraKeys: false,
      required: true
    }, {
      name: "type",
      type: "string",
      required: true
    }, {
      name: "args",
      type: "object",
      schema: [{
        name: "comparisons",
        type: "array",
        schema: {
          type: "string",
          "enum": validComparisonNames
        }
      }],
      allowExtraKeys: false
    }, {
      name: "onRemove",
      type: "function",
      required: true
    }, {
      name: "onChange",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      anchorEl = _useState2[0],
      setAnchorEl = _useState2[1];

  var comparison = props.data.comparison || "equals";
  var value = props.data.value || "";

  var onClick = function onClick(event) {
    setAnchorEl(event.currentTarget);
  };

  var onClose = function onClose() {
    setAnchorEl(null);
  }; // based on the state lets figure out what our value should be


  var valueString;

  if (comparison === "exists") {
    valueString = "EXISTS";
  } else if (comparison === "not_exists") {
    valueString = "NOT EXISTS";
  } else if (value === "") {
    valueString = "";
  } else {
    valueString = "".concat(comparisonMap[comparison], " \"").concat(value, "\"");
  } // filter the valid comparisons based on what the developer is allowing


  var activeComparisons = props.args && props.args.comparisons ? validComparisons.filter(function (val) {
    return props.args.comparisons.includes(val.value);
  }) : undefined;
  return React__default.createElement(StyledWrapper$9, null, React__default.createElement(DataViewPrimaryFilter, {
    label: props.label,
    value: valueString,
    type: props.type,
    onRemove: props.onRemove,
    onClick: onClick
  }), React__default.createElement(DataViewFilterDropdown, {
    anchorEl: anchorEl,
    onClose: onClose
  }, React__default.createElement(DataViewFilterTextDropdownContent, {
    value: value,
    onChange: props.onChange,
    comparison: comparison,
    comparisons: activeComparisons,
    onClose: onClose
  })));
}

function Spinner(props) {
  return React__default.createElement(CircularProgress, {
    style: {
      color: theme.colors.blue
    },
    size: 30,
    className: props.className
  });
}

function _templateObject2$4() {
  var data = _taggedTemplateLiteral(["\n\tmargin: 0px;\n"]);

  _templateObject2$4 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$p() {
  var data = _taggedTemplateLiteral(["\n\t& > .topBlock {\n\t\tdisplay: flex;\n\t\theight: 400px;\n\t\twidth: 600px;\n\t}\n\t\n\t& > .topBlock > .options > .searchBar {\n\t\tposition: sticky;\n\t\ttop: 0;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tpadding-left: 14px;\n\t\tz-index: 1;\n\t\tbackground: white;\n\t}\n\t\n\t& > .topBlock > .options > .searchBar > svg {\n\t\tpadding-right: 8px;\n\t}\n\t\n\t& > .topBlock > .options > .searchBar > .input {\n\t\tfont-family: ", ";\n\t\tline-height: 2rem;\n\t}\n\t\n\t& > .topBlock > .options {\n\t\toverflow-y: scroll;\n\t\tflex: 2;\n\t\tposition: relative;\n\t\ttransition: opacity .5s;\n\t\tpadding-right: 10px;\n\t}\n\t\n\t& > .topBlock > .options.disabled {\n\t\topacity: .4;\n\t\tpointer-events: none;\n\t}\n\t\n\t& > .topBlock > .options .listItem {\n\t\tpadding-top: 0px;\n\t\tpadding-bottom: 0px;\n\t}\n\t\n\t& > .topBlock > .options .listItemIcon {\n\t\tmin-width: auto;\n\t}\n\t\n\t& > .topBlock > .options > .spinner {\n\t\tmargin-top: 10px;\n\t\tmargin-bottom: 10px;\n\t}\n\t\n\t& > .topBlock > .options .checked {\n\t\tcolor: ", ";\n\t}\n\t\n\t& > .topBlock > .selected {\n\t\tpadding: 0px 0px 0px 15px;\n\t\twidth: 200px;\n\t\toverflow-y: auto;\n\t}\n\t\n\t& .comparisonDropdown {\n\t\tmargin-bottom: 1rem;\n\t}\n\t\n\t& .chip {\n\t\tdisplay: flex;\n\t\tbackground-color: ", "13;\n\t\tmargin-bottom: 4px;\n\t\tjustify-content: space-between;\n\t\tfont-family: ", ";\n\t\theight: 33px;\n\t}\n\t\n\t& .chip:focus {\n\t\tbackground-color: ", "13;\n\t}\n\t\n\t& .chip > span {\n\t\tflex: 1;\n\t\ttext-overflow: ellipsis;\n\t\toverflow: hidden;\n\t\twhite-space: nowrap;\n\t\tdisplay: block;\n\t}\n"]);

  _templateObject$p = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$a = styled.div(_templateObject$p(), theme.fontFamily, theme.colors.blue, theme.colors.blue, theme.fontFamily, theme.colors.blue);
var PopoverP = styled.p(_templateObject2$4());
var limit = 25;

function DataViewFilterMultiselectDropdownContent(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "value",
      type: "array"
    }, {
      name: "comparison",
      type: "string",
      required: true
    }, {
      name: "comparisons",
      type: "array"
    }, {
      name: "getOptions",
      type: "function",
      required: true
    }, {
      name: "selected",
      type: "array",
      required: true
    }, {
      name: "isOpen",
      type: "boolean",
      required: true
    }, {
      name: "onClose",
      type: "function",
      required: true
    }, {
      name: "onApply",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState({
    options: [],
    selected: props.selected.map(function (val) {
      return val.value;
    }),
    hasMore: false,
    skip: 0,
    keyword: undefined,
    comparison: props.comparison,
    loaded: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1]; // we need to combine the options we are querying for and the selected options that are passed in
  // since if they have already selected an item not in the current page, it won't be in the queried options


  var allOptions = [].concat(_toConsumableArray(props.selected), _toConsumableArray(state.options)); // mark the active comparison

  var activeComparison = props.comparisons ? props.comparisons.find(function (val) {
    return val.value === state.comparison;
  }) : undefined;
  React.useEffect(function () {
    function fetchData() {
      return _fetchData.apply(this, arguments);
    }

    function _fetchData() {
      _fetchData = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var options;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.getOptions({
                  limit: limit,
                  skip: state.skip
                });

              case 2:
                options = _context.sent;
                setState(_objectSpread2({}, state, {
                  options: options.docs,
                  hasMore: options.hasMore === true,
                  skip: state.skip + limit,
                  loaded: true
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _fetchData.apply(this, arguments);
    }

    fetchData();
  }, []);

  var onClear = function onClear() {
    setState(_objectSpread2({}, state, {
      selected: [],
      comparison: "in",
      keyword: undefined,
      skip: 0,
      hasMore: false
    }));
  };

  var onApply = function onApply() {
    props.onApply({
      value: state.selected,
      comparison: state.comparison
    });
  };

  var handleToggle = function handleToggle(option) {
    return function () {
      var newSelected = lodash.xor(state.selected, [option.value]);
      setState(_objectSpread2({}, state, {
        selected: newSelected
      }));
    };
  };

  var loadMore = function loadMore() {
    function fetchData() {
      return _fetchData2.apply(this, arguments);
    }

    function _fetchData2() {
      _fetchData2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var newOptions;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return props.getOptions({
                  limit: limit,
                  skip: state.skip,
                  keyword: state.keyword
                });

              case 2:
                newOptions = _context2.sent;
                setState(_objectSpread2({}, state, {
                  options: [].concat(_toConsumableArray(state.options), _toConsumableArray(newOptions.docs)),
                  hasMore: newOptions.hasMore === true,
                  skip: state.skip + limit
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return _fetchData2.apply(this, arguments);
    }

    fetchData();
  };

  var debouncedSetKeyword = lodash.debounce(function (value) {
    function fetchData() {
      return _fetchData3.apply(this, arguments);
    }

    function _fetchData3() {
      _fetchData3 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var newOptions;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return props.getOptions({
                  limit: limit,
                  skip: 0,
                  keyword: value
                });

              case 2:
                newOptions = _context3.sent;
                setState(_objectSpread2({}, state, {
                  options: newOptions.docs,
                  hasMore: newOptions.hasMore === true,
                  keyword: value === "" ? undefined : value,
                  skip: limit
                }));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      return _fetchData3.apply(this, arguments);
    }

    fetchData();
  }, 200);

  var keywordChange = function keywordChange(e) {
    debouncedSetKeyword(e.target.value);
  };

  var comparisonDropdown;

  if (props.comparisons) {
    var menuItems = props.comparisons.map(function (comparison) {
      return {
        label: comparison.label,
        onClick: function onClick() {
          // for exists and not_exists we want to clear the value
          if (["exists", "not_exists"].includes(comparison.value) === true) {
            setState(_objectSpread2({}, state, {
              selected: []
            }));
          }

          setState(_objectSpread2({}, state, {
            comparison: comparison.value
          }));
        }
      };
    });
    comparisonDropdown = React__default.createElement("div", {
      className: "comparisonDropdown"
    }, React__default.createElement("h5", null, "Comparison"), React__default.createElement(ButtonRow$1, null, React__default.createElement(Button$1, {
      label: activeComparison.label,
      variant: "outlined",
      color: "gray",
      iconPosition: "right",
      mIcon: ExpandMoreIcon,
      menuItems: menuItems
    }), React__default.createElement(Button$1, {
      variant: "icon",
      color: "blue",
      mIcon: HelpIcon,
      popover: React__default.createElement(PopoverP, null, React__default.createElement("b", null, "In"), " - The row must match one of selected option.", React__default.createElement("br", null), React__default.createElement("b", null, "Not in"), " - The row must match none of the selected options.", React__default.createElement("br", null), React__default.createElement("b", null, "All"), " - The row must match all of the selected options.", React__default.createElement("br", null), React__default.createElement("b", null, "Exists"), " - The row must have a value for this filter.", React__default.createElement("br", null), React__default.createElement("b", null, "Not Exists"), " - The row must not have a value for this filter.", React__default.createElement("br", null))
    })));
  } // if the user has chosen exists or not_exists then we need to disable the left panel since it isn't valid in that case


  var optionsDisabled = ["exists", "not_exists"].includes(state.comparison); // we want to avoid showing the list until the dropdown is fully open and the results are loaded from the db

  var showList = props.isOpen && state.loaded;

  var onChange = function onChange(selected) {
    setState(_objectSpread2({}, state, {
      selected: selected
    }));
  };

  return React__default.createElement(StyledWrapper$a, null, React__default.createElement("div", {
    className: "topBlock"
  }, React__default.createElement("div", {
    className: "options ".concat(optionsDisabled ? "disabled" : "")
  }, React__default.createElement("div", {
    className: "searchBar"
  }, React__default.createElement(SearchIcon, null), React__default.createElement(InputBase, {
    className: "input",
    placeholder: "Keyword...",
    onChange: keywordChange
  })), !showList && React__default.createElement(Spinner, {
    className: "spinner"
  }), showList && React__default.createElement(CheckboxList, {
    checked: state.selected,
    options: state.options,
    onChange: onChange
  }), state.hasMore && React__default.createElement("div", {
    className: "loadContainer"
  }, React__default.createElement(Button$1, {
    label: "Load more...",
    color: "blue",
    variant: "outlined",
    fullWidth: true,
    onClick: loadMore
  }))), React__default.createElement("div", {
    className: "selected"
  }, comparisonDropdown, React__default.createElement("h5", null, "Selected Options"), React__default.createElement("div", {
    className: "chips"
  }, showList && state.selected.map(function (value) {
    var option = allOptions.find(function (val) {
      return val.value === value;
    });

    if (option === undefined) {
      return null;
    }

    return React__default.createElement(Chip, {
      className: "chip",
      key: option.value,
      label: option.label,
      onDelete: handleToggle(option)
    });
  })))), React__default.createElement(DataViewFilterDropdownButtons, {
    onApply: onApply,
    onClear: onClear,
    onCancel: props.onClose
  }));
}

function _templateObject$q() {
  var data = _taggedTemplateLiteral(["\n\t\n"]);

  _templateObject$q = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$b = styled.span(_templateObject$q());
var validComparisons$1 = [{
  label: "In",
  value: "in"
}, {
  label: "Not In",
  value: "not_in"
}, {
  label: "All",
  value: "all"
}, {
  label: "Exists",
  value: "exists"
}, {
  label: "Not Exists",
  value: "not_exists"
}];
var validComparisonNames$1 = validComparisons$1.map(function (val) {
  return val.value;
});
var comparisonMap$1 = {
  "in": "",
  not_in: "Not In - ",
  all: "All - "
};

function DataViewFilterMultiselect(props) {
  jsvalidator.validate(props, {
    type: "object",
    schema: [{
      name: "label",
      type: "string",
      required: true
    }, {
      name: "data",
      type: "object",
      schema: [{
        name: "value",
        type: "array",
        schema: {
          type: "string"
        }
      }, {
        name: "comparison",
        type: "string",
        "enum": validComparisonNames$1
      }],
      allowExtraKeys: false,
      required: true
    }, {
      name: "type",
      type: "string",
      required: true
    }, {
      name: "args",
      type: "object",
      schema: [{
        name: "getOptions",
        type: "function",
        required: true
      }, {
        name: "getSelected",
        type: "function",
        required: true
      }, {
        name: "comparisons",
        type: "array",
        schema: {
          type: "string",
          "enum": validComparisonNames$1
        }
      }],
      allowExtraKeys: false,
      required: true
    }, {
      name: "onRemove",
      type: "function",
      required: true
    }, {
      name: "onChange",
      type: "function",
      required: true
    }],
    allowExtraKeys: false,
    throwOnInvalid: true
  });

  var _useState = React.useState({
    anchorEl: null,
    selected: [],
    dropdownOpen: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var value = props.data.value || [];
  var comparison = props.data.comparison || "in";
  React.useEffect(function () {
    function fetchData() {
      return _fetchData.apply(this, arguments);
    }

    function _fetchData() {
      _fetchData = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var selected;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return props.args.getSelected(value);

              case 2:
                selected = _context.sent;
                setState(_objectSpread2({}, state, {
                  selected: selected
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _fetchData.apply(this, arguments);
    }

    fetchData();
  }, [props.data]);

  var onClick = function onClick(event) {
    setState(_objectSpread2({}, state, {
      anchorEl: event.currentTarget
    }));
  };

  var onClose = function onClose() {
    setState(_objectSpread2({}, state, {
      anchorEl: null
    }));
  };

  var onEntered = function onEntered() {
    setState(_objectSpread2({}, state, {
      dropdownOpen: true
    }));
  };

  var onExited = function onExited() {
    setState(_objectSpread2({}, state, {
      dropdownOpen: false
    }));
  };

  var onApply = function onApply(data) {
    props.onChange(data);
    onClose();
  };

  var valueString;

  if (comparison === "exists") {
    valueString = "EXISTS";
  } else if (comparison === "not_exists") {
    valueString = "NOT EXISTS";
  } else if (state.selected.length > 0) {
    var tempString = state.selected.slice(0, 2).map(function (val) {
      return val.label;
    }).join(", ");

    if (state.selected.length > 2) {
      tempString += " (".concat(state.selected.length - 2, " more)");
    }

    valueString = "".concat(comparisonMap$1[comparison]).concat(tempString);
  } else {
    valueString = "";
  } // filter the valid comparisons based on what the developer is allowing


  var activeComparisons = props.args && props.args.comparisons ? validComparisons$1.filter(function (val) {
    return props.args.comparisons.includes(val.value);
  }) : undefined;
  return React__default.createElement(StyledWrapper$b, null, React__default.createElement(DataViewPrimaryFilter, {
    label: props.label,
    value: valueString,
    type: props.type,
    onRemove: props.onRemove,
    onClick: onClick
  }), React__default.createElement(DataViewFilterDropdown, {
    anchorEl: state.anchorEl,
    onClose: onClose,
    onEntered: onEntered,
    onExited: onExited
  }, React__default.createElement(DataViewFilterMultiselectDropdownContent, {
    value: value,
    comparison: comparison,
    comparisons: activeComparisons,
    selected: state.selected,
    getOptions: props.args.getOptions,
    isOpen: state.dropdownOpen,
    onApply: onApply,
    onClose: onClose
  })));
}

function _templateObject$r() {
  var data = _taggedTemplateLiteral(["\n\tposition: absolute;\n\ttop: 0px;\n\tbottom: 0px;\n\tright: 0px;\n\tleft: 0px;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-family: ", ";\n\t\n\t& > .mask {\n\t\tbackground: black;\n\t\tposition: absolute;\n\t\ttop: 0px;\n\t\tbottom: 0px;\n\t\tright: 0px;\n\t\tleft: 0px;\n\t\topacity: .8;\n\t}\n\t\n\t& > .container {\n\t\tposition: relative;\n\t\tbackground: white;\n\t\tborder-radius: 4px;\n\t\tpadding: 20px;\n\t}\n\t\n\t& > .container > h2 {\n\t\tmargin-top: 0px;\n\t}\n\t\n\t& > .container > .buttonBar {\n\t\ttext-align: right;\n\t}\n"]);

  _templateObject$r = function _templateObject() {
    return data;
  };

  return data;
}
var StyledWrapper$c = styled.div(_templateObject$r(), theme.fontFamily);

function Dialog(props) {
  return React__default.createElement(StyledWrapper$c, null, React__default.createElement("div", {
    className: "mask"
  }), React__default.createElement("div", {
    className: "container"
  }, React__default.createElement("h2", null, props.title), React__default.createElement("p", null, props.text), React__default.createElement("div", {
    className: "buttonBar"
  }, React__default.createElement(GridButtonBar, {
    buttons: props.buttons
  }))));
}

function Image(props) {
  return React__default.createElement("img", {
    className: props.className,
    src: props.src
  });
}

var Image$1 = React.memo(Image);

function transform_dateFormat() {
  return function (dateStr) {
    var data = new Date(dateStr);
    return "".concat(data.getMonth(), "-").concat(data.getDate(), "-").concat(data.getFullYear());
  };
}
function transform_get(path) {
  return function (data) {
    return lodash.get(data, path);
  };
}
function transform_thumbnail(_ref) {
  var width = _ref.width,
      height = _ref.height;
  return function (url) {
    var newUrl = url.replace(/\/upload\//, "/upload/c_fill,h_".concat(height, ",w_").concat(width, "/"));
    var element = React.createElement(Image$1, {
      src: newUrl,
      className: "transform_thumbnail"
    }, null);
    return element;
  };
}

var column_transforms = /*#__PURE__*/Object.freeze({
  __proto__: null,
  transform_dateFormat: transform_dateFormat,
  transform_get: transform_get,
  transform_thumbnail: transform_thumbnail
});

exports.Button = Button$1;
exports.ButtonRow = ButtonRow$1;
exports.Checkbox = Checkbox$1;
exports.CheckboxList = CheckboxList;
exports.DataView = DataView;
exports.DataViewFilterDropdown = DataViewFilterDropdown;
exports.DataViewFilterDropdownButtons = DataViewFilterDropdownButtons;
exports.DataViewFilterMultiselect = DataViewFilterMultiselect;
exports.DataViewFilterText = DataViewFilterText;
exports.DataViewPrimaryFilter = DataViewPrimaryFilter;
exports.Dialog = Dialog;
exports.Drawer = Drawer;
exports.DrawerContent = DrawerContent$1;
exports.Grid = DataView;
exports.GridFilterDropdown = DataViewFilterDropdown;
exports.GridFilterDropdownButtons = DataViewFilterDropdownButtons;
exports.GridFilterMultiselect = DataViewFilterMultiselect;
exports.GridFilterText = DataViewFilterText;
exports.GridPrimaryFilter = DataViewPrimaryFilter;
exports.Menu = Menu;
exports.Spinner = Spinner;
exports.theme = theme;
exports.transforms = column_transforms;
